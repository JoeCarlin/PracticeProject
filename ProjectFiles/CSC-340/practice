import numpy as np
import matplotlib.pyplot as plt

# Given points
points = [(0, -3), (2, 5), (4, -1), (6, 18)]
x_points = np.array([p[0] for p in points])
y_points = np.array([p[1] for p in points])

# Function to calculate Lagrange basis polynomials
def lagrange_basis(x, i, x_points):
    basis = 1
    for j in range(len(x_points)):
        if j != i:
            basis *= (x - x_points[j]) / (x_points[i] - x_points[j])
    return basis

# Function to calculate the Lagrange polynomial
def lagrange_polynomial(x, x_points, y_points):
    n = len(x_points)
    polynomial = 0
    for i in range(n):
        polynomial += y_points[i] * lagrange_basis(x, i, x_points)
    return polynomial

# Generate fitted values for visualization
x_fit = np.linspace(min(x_points), max(x_points), 100)
y_fit = [lagrange_polynomial(x, x_points, y_points) for x in x_fit]

# Plot the original points and the Lagrange polynomial
plt.scatter(x_points, y_points, color='red', label='Original Points')
plt.plot(x_fit, y_fit, color='blue', label='Lagrange Polynomial')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Lagrange Polynomial Fit')
plt.legend()
plt.grid()
plt.show()

# Print the Lagrange polynomial equation
print("The Lagrange Polynomial is:")
equation = ""
for i in range(len(x_points)):
    term = f"{y_points[i]:.4f}"
    for j in range(len(x_points)):
        if j != i:
            term += f" * (x - {x_points[j]}) / ({x_points[i]} - {x_points[j]})"
    equation += f" + ({term})"
print(equation)